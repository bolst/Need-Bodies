@page "/"

@using NeedBodies.Auth
@using NeedBodies.Data
@inject ProtectedSessionStorage protectedSessionStorage
@inject UserService userService
@inject AuthenticationStateProvider authStateProvider
@inject NavigationManager navManager
@inject IJSRuntime js

<PageTitle>@Utilities.brandName</PageTitle>

@if (DropInGame != null)
{
    <DropInModal SelectedGameForDropIn="@DropInGame"/>
}

<DisplayHeading Size="DisplayHeadingSize.Is2">Welcome to @Utilities.brandName</DisplayHeading>
<Divider />

<Fields>
    <Field>
        <Table Hoverable>
            <TableHeader>
                <TableRow>
                    <TableHeaderCell>Host</TableHeaderCell>
                    <TableHeaderCell>Location</TableHeaderCell>
                    <TableHeaderCell>Date</TableHeaderCell>
                    <TableHeaderCell>Time</TableHeaderCell>
                    <TableHeaderCell>Players</TableHeaderCell>
                    <TableHeaderCell>Goalies</TableHeaderCell>
                    <TableHeaderCell>Drop in</TableHeaderCell>
                </TableRow>
            </TableHeader>
            <TableBody>

                @if (Games == null)
                {
                    <p><em>Loading...</em></p>
                }
                else
                {
                    @foreach (var game in Games)
                    {
                        var date = game.FormatDate();
                        var time = game.FormatTime();
                        var players = game.FormatPlayerCount();
                        var goalies = game.FormatGoalieCount();
                        <TableRow>
                            <TableRowCell>@game.Host</TableRowCell>
                            <TableRowCell>@game.Location</TableRowCell>
                            <TableRowCell>@date</TableRowCell>
                            <TableRowCell>@time</TableRowCell>
                            <TableRowCell>@players</TableRowCell>
                            <TableRowCell>@goalies</TableRowCell>
                            <TableRowCell>
                                @if (currentUser != null)
                                {
                                    if (game.GetPlayers(userService).Contains(currentUser) || game.GetGoalies(userService).Contains(currentUser))
                                    {
                                        <Button Color="Color.Secondary" Outline>Already in Game</Button>
                                    }
                                    else
                                    {
                                        <Button Color="Color.Primary" Clicked="@(e => SetDropInGame(@game))" Outline>Drop in</Button>
                                    }

                                }
                                else
                                {
                                    <Button Color="Color.Secondary" Outline>Login/sign up to drop in</Button>
                                    }
                            </TableRowCell>
                        </TableRow>
                    }
                }
            </TableBody>
        </Table>

    </Field>
</Fields>

@*<Snackbar @ref="snackbar" Color="SnackbarColor.Danger">
    <SnackbarBody>
        @snackbarMessage
    </SnackbarBody>
</Snackbar>*@

@code{

    public List<Game> Games;

    public Game DropInGame { get; set; }

    public void SetDropInGame(Game game) { DropInGame = game; }

    private User currentUser = null;

    private Snackbar snackbar;
    private string snackbarMessage { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender == false) return;

        try
        {
            Games = await Utilities.GetGames();
        }
        catch (Exception exc)
        {
            snackbarMessage = "Unable to load games:" + exc.ToString();
            await snackbar.Show();
        }

        var userSession = await protectedSessionStorage.GetAsync<UserSession>("UserSession");
        if (userSession.Success)
        {
            string currentUserID = userSession.Value.ID;
            currentUser = userService.GetByID(currentUserID);
        }
        await InvokeAsync(() => StateHasChanged());
    }

    }