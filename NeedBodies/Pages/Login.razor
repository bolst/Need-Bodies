@page "/login"

@using NeedBodies.Auth
@inject UserService userService
@inject IJSRuntime js
@inject AuthenticationStateProvider authStateProvider
@inject NavigationManager navManager

    <AuthorizeView>
        <NotAuthorized>
            <Container Fluid Width="Width.Is50" >
                <Column>
                    <Card Margin="Margin.Is4.OnY">
                        <CardHeader>
                            <CardTitle>Log in</CardTitle>
                        </CardHeader>
                        <CardBody>
                            <Field Horizontal>
                                <FieldLabel ColumnSize="ColumnSize.IsFull.OnTablet.Is2.OnDesktop">Email</FieldLabel>
                                <FieldBody ColumnSize="ColumnSize.IsFull.OnTablet.Is10.OnDesktop">
                                    <TextEdit Role="TextRole.Email" Placeholder="Email" @bind-Text="@strEmail" />
                                </FieldBody>
                            </Field>
                            <Field Horizontal>
                                <FieldLabel ColumnSize="ColumnSize.IsFull.OnTablet.Is2.OnDesktop">Password</FieldLabel>
                                <FieldBody ColumnSize="ColumnSize.IsFull.OnTablet.Is10.OnDesktop">
                                    <TextEdit Role="TextRole.Password" Placeholder="Password" @bind-Text="@strPassword" />
                                </FieldBody>
                            </Field>

                            <Button Color="Color.Primary" Clicked="AuthenticateUserAsync" Loading="@isLoading">Log in</Button>

                            <Div>
                                <Link To="/forgot" Margin="Margin.Is2.FromStart">Forgot password?</Link>
                            </Div>
                        </CardBody>
                    </Card>
                </Column>
            </Container>
        </NotAuthorized>

    </AuthorizeView>

    @code{
        private string? strEmail { get; set; }
        private string? strPassword { get; set; }

        private bool isLoading = false;

        private async Task AuthenticateUserAsync()
        {

            isLoading = true;

            var user = userService.GetByEmail(strEmail);

            if (user == null || await user.CheckPassword(strPassword) != "success")
            {
                await js.InvokeVoidAsync("alert", "Invalid name/password");
                isLoading = false;
                return;
            }

            var userAuthStateProvider = (UserAuthenticationStateProvider)authStateProvider;
            await userAuthStateProvider.UpdateAuthenticationState(new UserSession
            {
                Name = user.Name,
                Role = user.Role,
                ID = user.ID
            });

            isLoading = false;
            navManager.NavigateTo("/", true);

        }

    }

