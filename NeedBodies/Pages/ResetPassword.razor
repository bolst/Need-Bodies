@page "/reset"

@using System.Text.RegularExpressions
@using NeedBodies.Data
@using NeedBodies.Auth
@using Microsoft.AspNetCore.WebUtilities
@inject UserService userService
@inject NavigationManager navManager

<AuthorizeView>
    <NotAuthorized>
        <Container Fluid Width="Width.Is50">
            <Column>
                <Card Margin="Margin.Is4.OnY">
                    <CardHeader>
                        <CardTitle>Reset password</CardTitle>
                    </CardHeader>
                    <CardBody>
                        <Validations @ref="validations" ValidateOnLoad="false">
                            <Validation Validator="ValidatePassword">
                                <Field Horizontal>
                                    <FieldLabel ColumnSize="ColumnSize.IsFull.OnTablet.Is2.OnDesktop">New password</FieldLabel>
                                    <FieldBody ColumnSize="ColumnSize.IsFull.OnTablet.Is10.OnDesktop">
                                        <TextEdit Role="TextRole.Password" Placeholder="Password" @bind-Text="@newPassword">
                                            <Feedback><ValidationError>Password must contain at least 8 characters, an uppercase, lowercase, number, and special character.</ValidationError></Feedback>
                                        </TextEdit>
                                    </FieldBody>
                                </Field>
                            </Validation>
                            <Validation Validator="ValidatePasswordConfirm">
                                <Field Horizontal>
                                    <FieldLabel ColumnSize="ColumnSize.IsFull.OnTablet.Is2.OnDesktop">Confirm password</FieldLabel>
                                    <FieldBody ColumnSize="ColumnSize.IsFull.OnTablet.Is10.OnDesktop">
                                        <TextEdit Role="TextRole.Password" Placeholder="Confirm password" @bind-Text="@newPasswordConfirm">
                                            <Feedback><ValidationError>Passwords must match</ValidationError></Feedback>
                                        </TextEdit>
                                    </FieldBody>
                                </Field>
                            </Validation>
                        </Validations>
                        <Button Color="Color.Primary" Clicked="ResetUserPassword" Loading="@isLoading">Reset password</Button>
                    </CardBody>
                </Card>
            </Column>
        </Container>
    </NotAuthorized>
</AuthorizeView>

@code {

    public Validations validations;

    public string newPassword { get; set; }
    public string newPasswordConfirm { get; set; }

    private string RID { get; set; }
    private string userID { get; set; }

    public bool isLoading = false;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender == false) return;

        var uri = navManager.ToAbsoluteUri(navManager.Uri);
        var queryStrings = QueryHelpers.ParseQuery(uri.Query);

        RID = String.Empty;
        if (queryStrings.TryGetValue("RID", out var myRID))
        {
            RID = myRID;
        }

        userID = String.Empty;
        if (queryStrings.TryGetValue("UID", out var myUID))
        {
            userID = myUID;
        }
    }

    private void ValidatePassword(ValidatorEventArgs e)
    {
        string myPassword = newPassword;

        if (String.IsNullOrEmpty(myPassword)) return;

        if (Regex.IsMatch(myPassword, Utilities.passwordRegex))
        {
            e.Status = ValidationStatus.Success;
        }
        else
        {
            e.Status = ValidationStatus.Error;
        }
    }

    private void ValidatePasswordConfirm(ValidatorEventArgs e)
    {
        if (newPassword.Equals(newPasswordConfirm))
        {
            e.Status = ValidationStatus.Success;
        }
        else
        {
            e.Status = ValidationStatus.Error;
        }
    }

    protected async Task ResetUserPassword()
    {
        isLoading = true;

        if (!await validations.ValidateAll())
        {
            isLoading = false;
            return;
        }


        string response = await Utilities.ResetUserPassword(userID, RID, newPassword, userService);

        isLoading = false;
        navManager.NavigateTo("/login");
    }
}

