@page "/signup"

@using System.Text.RegularExpressions
@using NeedBodies.Data
@using NeedBodies.Auth
@using PhoneNumbers
@inject UserService userService
@inject IJSRuntime js
@inject NavigationManager navManager
@inject AuthenticationStateProvider authStateProvider

<AuthorizeView>
    <NotAuthorized>
        <Container Fluid Width="Width.Is50">
            <Column>
                <Card Margin="Margin.Is4.OnY">
                    <CardHeader>
                        <CardTitle>Sign up</CardTitle>
                    </CardHeader>
                    <CardBody>
                        <Validations @ref="validations" ValidateOnLoad="false">
                            <Validation Validator="ValidationRule.IsNotEmpty">
                                <Field Horizontal>
                                    <FieldLabel ColumnSize="ColumnSize.IsFull.OnTablet.Is2.OnDesktop">Name</FieldLabel>
                                    <FieldBody ColumnSize="ColumnSize.IsFull.OnTablet.Is10.OnDesktop">
                                        <TextEdit Role="TextRole.Text" Placeholder="Name" @bind-Text="@strName">
                                            <Feedback><ValidationError>This can't be empty</ValidationError></Feedback>
                                        </TextEdit>
                                    </FieldBody>
                                </Field>
                            </Validation>
                            <Validation Validator="ValidationRule.IsEmail">
                                <Field Horizontal>
                                    <FieldLabel ColumnSize="ColumnSize.IsFull.OnTablet.Is2.OnDesktop">Email</FieldLabel>
                                    <FieldBody ColumnSize="ColumnSize.IsFull.OnTablet.Is10.OnDesktop">
                                        <TextEdit Role="TextRole.Email" Placeholder="Email" @bind-Text="@strEmail">
                                            <Feedback><ValidationError>Enter a valid email</ValidationError></Feedback>
                                        </TextEdit>
                                    </FieldBody>
                                </Field>
                            </Validation>
                            <Validation Validator="ValidatePhone">
                                <Field Horizontal>
                                    <FieldLabel ColumnSize="ColumnSize.IsFull.OnTablet.Is2.OnDesktop">Phone</FieldLabel>
                                    <FieldBody ColumnSize="ColumnSize.IsFull.OnTablet.Is10.OnDesktop">
                                        <TextEdit Role="TextRole.Telephone" Placeholder="Phone" @bind-Text="@strPhone">
                                            <Feedback><ValidationError>Enter a valid phone number</ValidationError></Feedback>
                                        </TextEdit>
                                    </FieldBody>
                                </Field>
                            </Validation>
                            <Validation Validator="ValidatePassword">
                                <Field Horizontal>
                                    <FieldLabel ColumnSize="ColumnSize.IsFull.OnTablet.Is2.OnDesktop">Password</FieldLabel>
                                    <FieldBody ColumnSize="ColumnSize.IsFull.OnTablet.Is10.OnDesktop">
                                        <TextEdit Role="TextRole.Password" Placeholder="Password" @bind-Text="@strPassword">
                                            <Feedback><ValidationError>Password must contain at least 8 characters, an uppercase, lowercase, number, and special character.</ValidationError></Feedback>
                                        </TextEdit>
                                    </FieldBody>
                                </Field>
                            </Validation>
                        </Validations>

                        <Button Color="Color.Primary" Clicked="@SignUpUserAsync" Loading="@isLoading">Sign up</Button>
                    </CardBody>
                </Card>
            </Column>
        </Container>
    </NotAuthorized>
</AuthorizeView>

@code {
    public string? strName { get; set; }
    public string? strEmail { get; set; }
    public string? strPhone { get; set; }
    public string? strPassword { get; set; }

    public bool isLoading = false;

    public Validations validations;

    private void ValidatePhone(ValidatorEventArgs e)
    {
        try
        {
            var phoneUtil = PhoneNumbers.PhoneNumberUtil.GetInstance();
            string myPhone = Convert.ToString(e.Value);
            PhoneNumber phoneNumber = phoneUtil.Parse(myPhone, "CA");
            if (phoneUtil.IsValidNumber(phoneNumber))
            {
                e.Status = ValidationStatus.Success;
            }
            else
            {
                e.Status = ValidationStatus.Error;
            }
        }
        catch
        {
            e.Status = ValidationStatus.Error;
        }
    }

    private void ValidatePassword(ValidatorEventArgs e)
    {
        string myPassword = Convert.ToString(e.Value);

        if (Regex.IsMatch(myPassword, Utilities.passwordRegex))
        {
            e.Status = ValidationStatus.Success;
        }
        else
        {
            e.Status = ValidationStatus.Error;
        }
    }

    public async Task SignUpUserAsync()
    {
        if (! await validations.ValidateAll())
        {
            return;
        }

        isLoading = true;

        User newUser = null;
        string message = null;

        try
        {
            newUser = await Utilities.AddUser(strName, strPhone, strEmail, strPassword);
        }
        catch(Exception exc)
        {
            await js.InvokeVoidAsync("alert", exc.ToString());
            isLoading = false;
            return;
        }

        if (newUser.Games != "")
        {
            // display message
            await js.InvokeVoidAsync("alert", newUser.Games);
            isLoading = false;
            return;
        }

        userService.addUser(newUser);
        var userAuthStateProvider = (UserAuthenticationStateProvider)authStateProvider;
        await userAuthStateProvider.UpdateAuthenticationState(new UserSession
        {
            Name = newUser.Name,
            Role = newUser.Role,
            ID = newUser.ID
        });

        isLoading = false;
        navManager.NavigateTo("/", true);
    }
    }

